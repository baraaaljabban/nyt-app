// Mocks generated by Mockito 5.4.0 from annotations
// in nyt/test/features/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i14;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i7;
import 'package:internet_connection_checker_plus/internet_connection_checker_plus.dart'
    as _i4;
import 'package:location/location.dart' as _i13;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nyt/core/enum/articles_type.dart' as _i12;
import 'package:nyt/core/error/failures.dart' as _i10;
import 'package:nyt/core/Network/http_client.dart' as _i18;
import 'package:nyt/core/Network/network_info.dart' as _i15;
import 'package:nyt/features/articles/data/datasources/articles_remote_data_source.dart'
    as _i17;
import 'package:nyt/features/articles/data/datasources/local/articles_local_data_source.dart'
    as _i16;
import 'package:nyt/features/articles/data/models/article_most_popular_response.dart'
    as _i5;
import 'package:nyt/features/articles/data/models/article_search_response.dart'
    as _i6;
import 'package:nyt/features/articles/domain/entities/article.dart' as _i11;
import 'package:nyt/features/articles/domain/repositories/article_repository.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationData_1 extends _i1.SmartFake implements _i3.LocationData {
  _FakeLocationData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_3 extends _i1.SmartFake
    implements _i4.AddressCheckResult {
  _FakeAddressCheckResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleMostPopularResponse_4 extends _i1.SmartFake
    implements _i5.ArticleMostPopularResponse {
  _FakeArticleMostPopularResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleSearchResponse_5 extends _i1.SmartFake
    implements _i6.ArticleSearchResponse {
  _FakeArticleSearchResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_6 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i8.ArticleRepository {
  MockArticleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>>
      getMostPopularArticle({
    required _i12.ArticleType? type,
    required int? days,
    required bool? isLoadMore,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getMostPopularArticle,
              [],
              {
                #type: type,
                #days: days,
                #isLoadMore: isLoadMore,
              },
            ),
            returnValue:
                _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>>.value(
                    _FakeEither_0<_i10.Failure, List<_i11.Article>>(
              this,
              Invocation.method(
                #getMostPopularArticle,
                [],
                {
                  #type: type,
                  #days: days,
                  #isLoadMore: isLoadMore,
                },
              ),
            )),
          ) as _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>> searchArticle(
          {required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchArticle,
          [],
          {#query: query},
        ),
        returnValue:
            _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>>.value(
                _FakeEither_0<_i10.Failure, List<_i11.Article>>(
          this,
          Invocation.method(
            #searchArticle,
            [],
            {#query: query},
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, List<_i11.Article>>>);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i13.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i3.LocationData> get onLocationChanged => (super.noSuchMethod(
        Invocation.getter(#onLocationChanged),
        returnValue: _i9.Stream<_i3.LocationData>.empty(),
      ) as _i9.Stream<_i3.LocationData>);
  @override
  _i9.Future<bool> changeSettings({
    _i3.LocationAccuracy? accuracy = _i3.LocationAccuracy.high,
    int? interval = 1000,
    double? distanceFilter = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSettings,
          [],
          {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<bool> isBackgroundModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isBackgroundModeEnabled,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableBackgroundMode,
          [],
          {#enable: enable},
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<_i3.LocationData> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i9.Future<_i3.LocationData>.value(_FakeLocationData_1(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i9.Future<_i3.LocationData>);
  @override
  _i9.Future<_i3.PermissionStatus> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i9.Future<_i3.PermissionStatus>.value(
            _i3.PermissionStatus.granted),
      ) as _i9.Future<_i3.PermissionStatus>);
  @override
  _i9.Future<_i3.PermissionStatus> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i9.Future<_i3.PermissionStatus>.value(
            _i3.PermissionStatus.granted),
      ) as _i9.Future<_i3.PermissionStatus>);
  @override
  _i9.Future<bool> serviceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #serviceEnabled,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<bool> requestService() => (super.noSuchMethod(
        Invocation.method(
          #requestService,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<_i3.AndroidNotificationData?> changeNotificationOptions({
    String? channelName,
    String? title,
    String? iconName,
    String? subtitle,
    String? description,
    _i14.Color? color,
    bool? onTapBringToFront,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationOptions,
          [],
          {
            #channelName: channelName,
            #title: title,
            #iconName: iconName,
            #subtitle: subtitle,
            #description: description,
            #color: color,
            #onTapBringToFront: onTapBringToFront,
          },
        ),
        returnValue: _i9.Future<_i3.AndroidNotificationData?>.value(),
      ) as _i9.Future<_i3.AndroidNotificationData?>);
}

/// A class which mocks [ConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionChecker extends _i1.Mock implements _i15.ConnectionChecker {
  MockConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i15.NetworkStatus> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue:
            _i9.Future<_i15.NetworkStatus>.value(_i15.NetworkStatus.Online),
      ) as _i9.Future<_i15.NetworkStatus>);
}

/// A class which mocks [InternetConnectionCheckerPlus].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionCheckerPlus extends _i1.Mock
    implements _i4.InternetConnectionCheckerPlus {
  MockInternetConnectionCheckerPlus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);
  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);
  @override
  List<_i4.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i4.AddressCheckOptions>[],
      ) as List<_i4.AddressCheckOptions>);
  @override
  set addresses(List<_i4.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<_i4.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i9.Future<_i4.InternetConnectionStatus>.value(
            _i4.InternetConnectionStatus.connected),
      ) as _i9.Future<_i4.InternetConnectionStatus>);
  @override
  _i9.Stream<_i4.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i9.Stream<_i4.InternetConnectionStatus>.empty(),
      ) as _i9.Stream<_i4.InternetConnectionStatus>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);
  @override
  _i9.Future<_i4.AddressCheckResult> isHostReachable(
          _i4.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i9.Future<_i4.AddressCheckResult>.value(_FakeAddressCheckResult_3(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i9.Future<_i4.AddressCheckResult>);
}

/// A class which mocks [ArticlesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticlesLocalDataSource extends _i1.Mock
    implements _i16.ArticlesLocalDataSource {
  MockArticlesLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void cacheArticles({
    required List<_i5.ArticleModel>? articlesModel,
    required _i12.ArticleType? articleType,
    required bool? isLoadMore,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cacheArticles,
          [],
          {
            #articlesModel: articlesModel,
            #articleType: articleType,
            #isLoadMore: isLoadMore,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i5.ArticleModel> getCacheArticles(
          {required _i12.ArticleType? articleType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheArticles,
          [],
          {#articleType: articleType},
        ),
        returnValue: <_i5.ArticleModel>[],
      ) as List<_i5.ArticleModel>);
  @override
  List<_i5.ArticleModel> searchLocalArticles({required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchLocalArticles,
          [],
          {#query: query},
        ),
        returnValue: <_i5.ArticleModel>[],
      ) as List<_i5.ArticleModel>);
}

/// A class which mocks [ArticleRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRemoteDataSource extends _i1.Mock
    implements _i17.ArticleRemoteDataSource {
  MockArticleRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.ArticleMostPopularResponse> getMostPopularArticle({
    required String? type,
    required int? days,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMostPopularArticle,
          [],
          {
            #type: type,
            #days: days,
          },
        ),
        returnValue: _i9.Future<_i5.ArticleMostPopularResponse>.value(
            _FakeArticleMostPopularResponse_4(
          this,
          Invocation.method(
            #getMostPopularArticle,
            [],
            {
              #type: type,
              #days: days,
            },
          ),
        )),
      ) as _i9.Future<_i5.ArticleMostPopularResponse>);
  @override
  _i9.Future<_i6.ArticleSearchResponse> searchArticle(
          {required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchArticle,
          [],
          {#query: query},
        ),
        returnValue: _i9.Future<_i6.ArticleSearchResponse>.value(
            _FakeArticleSearchResponse_5(
          this,
          Invocation.method(
            #searchArticle,
            [],
            {#query: query},
          ),
        )),
      ) as _i9.Future<_i6.ArticleSearchResponse>);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i18.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i7.Response> getData({
    required String? path,
    Map<String, String>? extraHeaders,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
          {
            #path: path,
            #extraHeaders: extraHeaders,
          },
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #getData,
            [],
            {
              #path: path,
              #extraHeaders: extraHeaders,
            },
          ),
        )),
      ) as _i9.Future<_i7.Response>);
}
